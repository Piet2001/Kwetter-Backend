# Set .env vars with:
# kubectl delete secret env-vars
# kubectl create secret generic env-vars --from-env-file=.env

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: gateway-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gateway-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: gateway-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "gateway"
        dapr.io/app-port: "5000"
    spec:
      containers:
        - name: gateway-container # Name we want to give the container
          image: ghcr.io/piet2001/kwetter-gateway:f31243612bcc130d2996c80ef38d5978f9604845 # Remote Docker image
          ports:
            - containerPort: 5000 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: spring_profiles_active
              value: production
            - name: JWK_SET_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: JWK_SET_URI
            - name: ISSUER_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: ISSUER_URI
            - name: AUDIENCE_MESSAGE_SERVICE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: AUDIENCE_MESSAGE_SERVICE
            - name: AUDIENCE_USER_SERVICE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: AUDIENCE_USER_SERVICE                  
            - name: AUDIENCE_FRONTEND_SERVICE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: AUDIENCE_FRONTEND_SERVICE

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: userservice-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: userservice-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: userservice-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "user-service"
        dapr.io/app-port: "5001"
    spec:
      containers:
        - name: userservice-container # Name we want to give the container
          image: ghcr.io/piet2001/kwetter-user-service:f31243612bcc130d2996c80ef38d5978f9604845 # Remote Docker image
          ports:
            - containerPort: 5001 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: CONNECTION_STRING
            - name: DB_NAME_USER
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: DB_NAME_USER
            - name: JWK_SET_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: JWK_SET_URI
            - name: ISSUER_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: ISSUER_URI
            - name: AUDIENCE_USER_SERVICE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: AUDIENCE_USER_SERVICE

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: messageservice-deployment # Name of the deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: messageservice-pod # The deployment will target pods with this name
  template:
    metadata:
      labels:
        app: messageservice-pod # Name of the pods
      annotations:
        dapr.io/enabled: "true"
        dapr.io/app-id: "message-service"
        dapr.io/app-port: "5002"
    spec:
      containers:
        - name: messageservice-container # Name we want to give the container
          image: ghcr.io/piet2001/kwetter-message-service:f31243612bcc130d2996c80ef38d5978f9604845 # Remote Docker image
          ports:
            - containerPort: 5003 # Expose the port that the service/app runs on
          imagePullPolicy: Always
          env:
            - name: spring_profiles_active
              value: production
            - name: CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: CONNECTION_STRING
            - name: DB_NAME_MESSAGE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: DB_NAME_MESSAGE
            - name: JWK_SET_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: JWK_SET_URI
            - name: ISSUER_URI
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: ISSUER_URI
            - name: AUDIENCE_MESSAGE_SERVICE
              valueFrom:
                secretKeyRef:
                  name: env-vars
                  key: AUDIENCE_MESSAGE_SERVICE

---

kind: Service
apiVersion: v1
metadata:
  annotations:
    service.beta.kubernetes.io/azure-dns-label-name: kwettergw
  name: gateway-service # Name of the service
spec:
  selector:
    app: gateway-pod # Send traffic to pods with this label
  ports:
    - name: default
      port: 80 # Port that we want to reach the service running on the pods on
      targetPort: 5000 # Port that the running service exposes within the container
  type: LoadBalancer

---

kind: Service
apiVersion: v1
metadata:
  name: userservice-service # Name of the service
spec:
  selector:
    app: userservice-pod # Send traffic to pods with this label
  ports:
    - name: default
      port: 5001 # Port that we want to reach the service running on the pods on
      targetPort: 5001 # Port that the running service exposes within the container
  type: ClusterIP

---

kind: Service
apiVersion: v1
metadata:
  name: messageservice-service # Name of the service
spec:
  selector:
    app: messageservice-pod # Send traffic to pods with this label
  ports:
    - name: default
      port: 5002 # Port that we want to reach the service running on the pods on
      targetPort: 5002 # Port that the running service exposes within the container
  type: ClusterIP
